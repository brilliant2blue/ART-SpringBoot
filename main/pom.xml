<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>com.nuaa.art</groupId>
        <artifactId>ART</artifactId>
        <version>${revision}</version>
    </parent>

    <artifactId>main</artifactId>
<!--    <version>${project.parent.version}</version>-->
    <name>main</name>
    <description>main</description>
    <packaging>jar</packaging>

    <dependencies>
        <dependency>
            <groupId>com.nuaa.art</groupId>
            <artifactId>atg</artifactId>
            <version>${project.parent.version}</version>
        </dependency>
        <dependency>
            <groupId>com.nuaa.art</groupId>
            <artifactId>vrm</artifactId>
            <version>${project.parent.version}</version>
        </dependency>
        <dependency>
            <groupId>com.nuaa.art</groupId>
            <artifactId>user</artifactId>
            <version>${project.parent.version}</version>
        </dependency>
        <dependency>
            <groupId>com.nuaa.art</groupId>
            <artifactId>vrmCheck</artifactId>
            <version>${project.parent.version}</version>
        </dependency>
        <dependency>
            <groupId>com.nuaa.art</groupId>
            <artifactId>vrmVerify</artifactId>
            <version>${project.parent.version}</version>
        </dependency>
    </dependencies>


    <build>
        <plugins>
            <!-- 1、编译出不带 lib 文件夹的Jar包 -->
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <version>${spring-boot.version}</version>
                <configuration>
<!--                    <fork>true</fork>-->
                    <!--引入第三方jar包时,不添加则引入的第三方jar不会被打入jar包中-->
                    <includeSystemScope>true</includeSystemScope>
                    <!--排除第三方jar文件-->
                    <includes>
                        <include>
                            <groupId>nothing</groupId>
                            <artifactId>nothing</artifactId>
                        </include>
                    </includes>
<!--                    <mainClass>com.nuaa.art.main.MainApplication</mainClass>-->
<!--                    <skip>true</skip>-->
                </configuration>
                <executions>
                    <execution>
                        <id>repackage</id>
                        <goals>
                            <goal>repackage</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <!-- 2、完成对Java代码的编译 -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.8.1</version>
                <configuration>
                    <source>${java.version}</source>
                    <target>${java.version}</target>
                    <encoding>${project.build.sourceEncoding}</encoding>
                    <!-- 用来传递编译器自身不包含但是却支持的参数选项 -->
<!--                    <compilerArguments>-->
<!--                        <verbose/>-->
<!--                        &lt;!&ndash; windows环境（二选一） &ndash;&gt;-->
<!--                        <bootclasspath>${java.home}/lib/rt.jar:${java.home}/lib/jce.jar</bootclasspath>-->
<!--                        &lt;!&ndash; Linux环境（二选一） &ndash;&gt;-->
<!--                        <bootclasspath>${java.home}/lib/rt.jar:${java.home}/lib/jce.jar</bootclasspath>-->
<!--                    </compilerArguments>-->
                </configuration>
            </plugin>

            <!-- 3、将所有依赖的jar文件复制到target/lib目录 -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <executions>
                    <execution>
                        <id>copy-dependencies</id>
                        <phase>prepare-package</phase>
                        <goals>
                            <goal>copy-dependencies</goal>
                        </goals>
                        <configuration>
                            <!--复制到哪个路径，${project.build.directory} 缺醒为 target，其他内置参数见下面解释-->
                            <outputDirectory>${user.dir}/out/lib</outputDirectory>
                            <overWriteReleases>false</overWriteReleases>
                            <overWriteSnapshots>false</overWriteSnapshots>
                            <overWriteIfNewer>true</overWriteIfNewer>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!-- maven资源文件复制插件 -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-resources-plugin</artifactId>
                <executions>
                    <execution>
                        <id>copy-config</id>
                        <phase>package</phase>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${user.dir}/out/config</outputDirectory>
                            <resources>
                                <resource>
                                    <directory>src/main/resources</directory>
                                    <filtering>true</filtering>
                                    <includes>
                                         <include>*.properties</include>
                                         <include>*.yml</include>
                                    </includes>
                                </resource>
                            </resources>
                            <encoding>${project.build.sourceEncoding}</encoding>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!-- 4、指定启动类，指定配置文件，将依赖打成外部jar包 -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <configuration>
                    <outputDirectory>${user.dir}/out/</outputDirectory>
                    <archive>
                        <manifest>
                            <!-- 是否要把第三方jar加入到类构建路径 -->
                            <addClasspath>true</addClasspath>
                            <!-- 外部依赖jar包的最终位置 -->
                            <classpathPrefix>lib/</classpathPrefix>
                            <!-- 项目启动类 -->
                            <mainClass>com.nuaa.art.main.MainApplication</mainClass>
                        </manifest>
                        <manifestEntries>
                            <Class-Path>config/</Class-Path>
                        </manifestEntries>
                    </archive>
                    <!--资源文件不打进jar包中，做到配置跟项目分离的效果-->
                    <excludes>
                        <!-- 业务jar中过滤application.properties/yml文件，在jar包外控制 -->
                        <exclude>*.properties</exclude>
                        <exclude>*.xml</exclude>
                        <exclude>*.yml</exclude>
                        <exclude>cache/</exclude>
                    </excludes>
                </configuration>
            </plugin>
        </plugins>
<!--        <resources>-->
<!--            <resource>-->
<!--                <directory>resources</directory>-->
<!--                <includes>-->
<!--                    <include>*.properties</include>-->
<!--                    <include>*.yml</include>-->
<!--                </includes>-->
<!--                <filtering>true</filtering>-->
<!--                &lt;!&ndash; 放在项目构建的target的里面	 &ndash;&gt;-->
<!--                <targetPath>${user.dir}/config/</targetPath>-->
<!--            </resource>-->
<!--        </resources>-->
    </build>

</project>
